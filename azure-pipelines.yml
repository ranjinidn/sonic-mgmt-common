# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
    - master
pr:
  branches:
    include:
    - master

stages:
- stage: Build
  jobs:
  - job:
    displayName: "Build"
    timeoutInMinutes: 60

    pool:
      vmImage: ubuntu-20.04

    container:
      image: sonicdev-microsoft.azurecr.io:443/sonic-slave-bullseye:latest

    steps:
    - checkout: self
      clean: true
      submodules: recursive
      displayName: 'Checkout code'

    - task: DownloadPipelineArtifact@2
      inputs:
        source: specific
        project: build
        pipeline: 1
        artifact: sonic-buildimage.vs
        runVersion: 'latestFromBranch'
        runBranch: 'refs/heads/master'
      displayName: "Download sonic buildimage"

    - script: |
        # REDIS
        sudo apt-get update
        sudo apt-get install -y redis-server
        sudo sed -ri 's/^# unixsocket/unixsocket/' /etc/redis/redis.conf
        sudo sed -ri 's/^unixsocketperm .../unixsocketperm 777/' /etc/redis/redis.conf
        sudo sed -ri 's/redis-server.sock/redis.sock/' /etc/redis/redis.conf
        sudo service redis-server start

        # LIBYANG
        sudo dpkg -i ../target/debs/bullseye/libyang*1.0.73*.deb
      displayName: "Install dependency"

    - script: |
        ls -l
        INCLUDE_TEST_MODELS=y dpkg-buildpackage -rfakeroot -us -uc -b -j$(nproc) && cp ../*.deb .
      displayName: "Build"

    - publish: $(System.DefaultWorkingDirectory)/
      artifact: sonic-mgmt-common
      displayName: "Archive artifacts"

    - script: |
        # Run sanity tests for sonic-mgmt-common.
        # Assumes sonic-mgmt-common is already compiled and all dependencies
        # are installed.

        set -x

        STATUS=0
        DEBDIR=$(realpath debian/sonic-mgmt-common)

        [[ -f tools/test/database_config.json ]] && \
            export DB_CONFIG_PATH=${PWD}/tools/test/database_config.json

        # Run CVL tests

        pushd build/tests/cvl

        CVL_SCHEMA_PATH=testdata/schema \
            ./cvl.test -test.v -logtostderr || STATUS=1

        popd

        # Run translib tests

        pushd build/tests/translib

        export CVL_SCHEMA_PATH=${DEBDIR}/usr/sbin/schema
        export YANG_MODELS_PATH=${DEBDIR}/usr/models/yang

        ./db.test -test.v -logtostderr || STATUS=1

        ./translib.test -test.v -logtostderr || STATUS=1

        ./transformer.test -test.v -logtostderr || STATUS=1

        popd

        exit ${STATUS}
      displayName: "Sanity test"
