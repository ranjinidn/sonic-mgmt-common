diff -ruN goyang-dir-orig/annotate.go goyang-dir/annotate.go
--- goyang-dir-orig/annotate.go	1969-12-31 16:00:00.000000000 -0800
+++ goyang-dir/annotate.go	2022-01-17 23:55:14.303340837 -0800
@@ -0,0 +1,395 @@
+// Copyright 2015 Google Inc.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package main
+
+import (
+	"fmt"
+	"io"
+	"strings"
+
+	"github.com/openconfig/goyang/pkg/yang"
+)
+
+var allimports = make(map[string]string)
+var modules = make(map[string]*yang.Module)
+var allmodules = make(map[string]*yang.Module)
+
+func init() {
+	register(&formatter{
+		name: "annotate",
+		f:     genAnnotate,
+		utilf: getFile,
+		help: "generate template file for yang annotations",
+	})
+}
+
+// Get the modules for which annotation file needs to be generated
+func getFile(files []string, mods map[string]*yang.Module) {
+    allmodules = mods
+    for _, name := range files {
+        slash := strings.Split(name, "/")
+            modname := slash[len(slash)-1]
+	    modname = strings.TrimSuffix(modname, ".yang");
+	    /* Save the yang.Module entries we are interested in */
+	    modules[modname] = mods[modname]
+    }
+}
+
+func genAnnotate(w io.Writer, entries []*yang.Entry) {
+    /* Get all the imported modules in the entries */
+    GetAllImports(entries)
+    for _, e := range entries {
+        if _, ok := modules[e.Name]; ok {
+            var path string = ""
+            var prefix string = ""
+            generate(w, e, path, prefix)
+            // { Add closing brace for each module
+            fmt.Fprintln(w, "}")
+            fmt.Fprintln(w)
+        }
+    }
+}
+
+// generate writes to stdoutput a template annotation file entry for the selected modules.
+func generate(w io.Writer, e *yang.Entry, path string, prefix string) {
+    if e.Parent == nil {
+        if e.Name != "" {
+            fmt.Fprintf(w, "module %s-annot {\n", e.Name) //}
+            fmt.Fprintln(w)
+            fmt.Fprintf(w, "    yang-version \"%s\";\n", getYangVersion(e.Name, modules))
+            fmt.Fprintln(w)
+            fmt.Fprintf(w, "    namespace \"http://openconfig.net/yang/annotation/%s-annot\";\n", e.Prefix.Name)
+            if e.Prefix != nil {
+                fmt.Fprintf(w, "    prefix \"%s-annot\";\n", e.Prefix.Name)
+            }
+            fmt.Fprintln(w)
+
+	    var imports = make(map[string]string)
+            imports = getImportModules(e.Name, modules)
+	    for k := range imports {
+		if e.Name != k {
+                    fmt.Fprintf(w, "    import %s { prefix %s; }\n", k, allimports[k])
+	        }
+            }
+	    // Include the module for which annotation is being generated
+            fmt.Fprintf(w, "    import %s { prefix %s; }\n", e.Name, e.Prefix.Name)
+
+            fmt.Fprintln(w)
+        }
+    }
+
+    name := e.Name
+    if prefix == "" && e.Prefix != nil {
+	prefix = e.Prefix.Name
+    }
+    name = prefix + ":" + name
+
+    if (e.Node.Kind() != "module") {
+        path = path + "/" + name
+        printDeviation(w, path)
+    }
+
+    var names []string
+    for k := range e.Dir {
+	names = append(names, k)
+    }
+
+    if (e.Node.Kind() == "module") {
+	    if len(e.Node.(*yang.Module).Augment) > 0 {
+		    for _,a := range e.Node.(*yang.Module).Augment {
+			    pathList := strings.Split(a.Name, "/")
+			    pathList = pathList[1:]
+			    for i, pvar := range pathList {
+				    if len(pvar) > 0 && !strings.Contains(pvar, ":") {
+					    pvar = e.Prefix.Name + ":" + pvar
+					    pathList[i] = pvar
+				    }
+			    }
+			    path = "/" + strings.Join(pathList, "/")
+			    handleAugments(w, a, e.Node.(*yang.Module).Grouping, e.Prefix.Name, path)
+		    }
+	    }
+    }
+
+    for _, k := range names {
+        generate(w, e.Dir[k], path, prefix)
+    }
+
+}
+
+func printDeviation(w io.Writer, path string){
+    fmt.Fprintf(w, "    deviation %s {\n", path)
+    fmt.Fprintf(w, "      deviate add {\n")
+    fmt.Fprintf(w, "      }\n")
+    fmt.Fprintf(w, "    }\n")
+    fmt.Fprintln(w)
+}
+
+
+// Save to map all imported modules
+func GetAllImports(entries []*yang.Entry) {
+    for _, e := range entries {
+        allimports[e.Name] = e.Prefix.Name
+    }
+}
+
+func GetModuleFromPrefix(prefix string) string {
+    for m, p := range allimports {
+	    if prefix == p {
+		    return m
+	    }
+    }
+    return ""
+}
+
+//Get Yang version from the yang.Modules
+func getYangVersion(modname string, mods map[string]*yang.Module) string {
+    if (mods[modname].YangVersion != nil) {
+	    return mods[modname].YangVersion.Name
+    }
+    return ""
+
+}
+
+// Get imported modules for a given module from yang.Module
+func getImportModules(modname string, mods map[string]*yang.Module) map[string]string {
+    imports := map[string]string{}
+    if (mods[modname].Import != nil) {
+        for _, imp := range mods[modname].Import {
+	    imports[imp.Name] = imp.Prefix.Name
+        }
+    }
+    return imports
+}
+
+func handleAugments(w io.Writer, a *yang.Augment, grp []*yang.Grouping, prefix string, path string) {
+    for _, u := range a.Uses {
+	    grpN := u.Name
+	    for _, g := range grp {
+		if grpN == g.Name {
+		    if len(g.Container) > 0 {
+                        handleContainer(w, g.Container, grp, prefix, path)
+		    }
+		    if len(g.List) > 0 {
+                        handleList(w, g.List, grp, prefix, path)
+		    }
+		    if len(g.LeafList) > 0 {
+                        handleLeafList(w, g.LeafList, prefix, path)
+		    }
+		    if len(g.Leaf) > 0 {
+                        handleLeaf(w, g.Leaf, prefix, path)
+		    }
+		    if len(g.Choice) > 0 {
+                        handleChoice(w, g.Choice, grp, prefix, path)
+		    }
+		    if len(g.Uses) > 0 {
+                        handleUses(w, g.Uses, grp, prefix, path)
+		    }
+		}
+	    }
+    }
+
+}
+
+func handleUses(w io.Writer, u []*yang.Uses, grp []*yang.Grouping, prefix string, path string) {
+    for _, u := range u {
+            grpN := u.Name
+	    if  strings.Contains(grpN, ":") {
+	        tokens := strings.Split(grpN, ":")
+		nprefix := tokens[0]
+		grpN = tokens[1]
+		mod := GetModuleFromPrefix(nprefix)
+	        grp = allmodules[mod].Grouping
+	    }
+            for _, g := range grp {
+                if grpN == g.Name {
+                    if len(g.Container) > 0 {
+                        handleContainer(w, g.Container, grp, prefix, path)
+                    }
+                    if len(g.List) > 0 {
+                        handleList(w, g.List, grp, prefix, path)
+                    }
+                    if len(g.LeafList) > 0 {
+                        handleLeafList(w, g.LeafList, prefix, path)
+                    }
+                    if len(g.Leaf) > 0 {
+                        handleLeaf(w, g.Leaf, prefix, path)
+                    }
+                    if len(g.Choice) > 0 {
+                        handleChoice(w, g.Choice, grp, prefix, path)
+                    }
+                    if len(g.Uses) > 0 {
+                        handleUses(w, g.Uses, grp, prefix, path)
+                    }
+
+                }
+            }
+    }
+
+}
+
+func handleContainer(w io.Writer, ctr []*yang.Container, grp []*yang.Grouping, prefix string, path string) {
+	for _, c := range ctr {
+		npath := path + "/" + prefix + ":" + c.Name
+		printDeviation(w, npath)
+		if len(c.Container) > 0 {
+			handleContainer(w, c.Container, grp, prefix, npath)
+		}
+		if len(c.List) > 0 {
+			handleList(w, c.List, grp, prefix, npath)
+		}
+		if len(c.LeafList) > 0 {
+			handleLeafList(w, c.LeafList, prefix, npath)
+		}
+		if len(c.Leaf) > 0 {
+			handleLeaf(w, c.Leaf, prefix, npath)
+		}
+		if len(c.Choice) > 0 {
+			handleChoice(w, c.Choice, grp, prefix, npath)
+		}
+		if len(c.Grouping) > 0 {
+			handleGrouping(w, c.Grouping, grp, prefix, npath)
+		}
+		if len(c.Uses) > 0 {
+			handleUses(w, c.Uses, grp, prefix, npath)
+		}
+	}
+}
+
+func handleList(w io.Writer, lst []*yang.List, grp []*yang.Grouping, prefix string, path string) {
+        for _, l := range lst {
+		npath := path + "/" + prefix + ":" + l.Name
+                printDeviation(w, npath)
+                if len(l.Container) > 0 {
+                        handleContainer(w, l.Container, grp, prefix, npath)
+                }
+                if len(l.List) > 0 {
+                        handleList(w, l.List, grp, prefix, npath)
+                }
+                if len(l.LeafList) > 0 {
+                        handleLeafList(w, l.LeafList, prefix, npath)
+                }
+                if len(l.Leaf) > 0 {
+                        handleLeaf(w, l.Leaf, prefix, npath)
+                }
+                if len(l.Choice) > 0 {
+                        handleChoice(w, l.Choice, grp, prefix, npath)
+                }
+                if len(l.Grouping) > 0 {
+                        handleGrouping(w, l.Grouping, grp, prefix, npath)
+                }
+                if len(l.Uses) > 0 {
+                        handleUses(w, l.Uses, grp, prefix, npath)
+                }
+
+        }
+}
+
+func handleGrouping(w io.Writer, grp []*yang.Grouping, grptop []*yang.Grouping, prefix string, path string) {
+        for _, g := range grp {
+		npath := path + "/" + prefix + ":" + g.Name
+                printDeviation(w, npath)
+                if len(g.Container) > 0 {
+                        handleContainer(w, g.Container, grptop, prefix, npath)
+                }
+                if len(g.List) > 0 {
+                        handleList(w, g.List, grptop, prefix, npath)
+                }
+                if len(g.LeafList) > 0 {
+                        handleLeafList(w, g.LeafList, prefix, npath)
+                }
+                if len(g.Leaf) > 0 {
+                        handleLeaf(w, g.Leaf, prefix, npath)
+                }
+                if len(g.Choice) > 0 {
+                        handleChoice(w, g.Choice, grptop, prefix, npath)
+                }
+                if len(g.Grouping) > 0 {
+                        handleGrouping(w, g.Grouping, grptop, prefix, npath)
+                }
+                if len(g.Uses) > 0 {
+                        handleUses(w, g.Uses, grptop, prefix, npath)
+                }
+
+        }
+}
+
+func handleLeaf (w io.Writer, lf []*yang.Leaf, prefix string, path string) {
+	if len(lf) > 0 {
+		for _, l := range lf {
+			npath := path + "/" + prefix + ":" + l.Name
+			printDeviation(w, npath)
+		}
+	}
+
+}
+
+func handleLeafList (w io.Writer, llst []*yang.LeafList, prefix string, path string) {
+	if len(llst) > 0 {
+		for _, l := range llst {
+			npath := path + "/" + prefix + ":" + l.Name
+			printDeviation(w, npath)
+		}
+	}
+}
+
+func handleChoice (w io.Writer, ch []*yang.Choice, grp []*yang.Grouping, prefix string, path string) {
+        for _, c := range ch {
+		npath := path + "/" + prefix + ":" + c.Name
+                printDeviation(w, npath)
+                if len(c.Container) > 0 {
+                        handleContainer(w, c.Container, grp, prefix, npath)
+                }
+                if len(c.List) > 0 {
+                        handleList(w, c.List, grp, prefix, npath)
+                }
+                if len(c.LeafList) > 0 {
+                        handleLeafList(w, c.LeafList, prefix, npath)
+                }
+                if len(c.Leaf) > 0 {
+                        handleLeaf(w, c.Leaf, prefix, npath)
+		}
+		if len(c.Case) > 0 {
+			handleCase(w, c.Case, grp, prefix, npath)
+		}
+	}
+}
+
+func handleCase (w io.Writer, ch []*yang.Case, grp []*yang.Grouping, prefix string, path string) {
+        for _, c := range ch {
+		npath := path + "/" + prefix + ":" + c.Name
+                printDeviation(w, npath)
+                if len(c.Container) > 0 {
+                        handleContainer(w, c.Container, grp, prefix, npath)
+                }
+                if len(c.List) > 0 {
+                        handleList(w, c.List, grp, prefix, npath)
+                }
+                if len(c.LeafList) > 0 {
+                        handleLeafList(w, c.LeafList, prefix, npath)
+                }
+                if len(c.Leaf) > 0 {
+                        handleLeaf(w, c.Leaf, prefix, npath)
+                }
+                if len(c.Choice) > 0 {
+                        handleChoice(w, c.Choice, grp, prefix, npath)
+                }
+                if len(c.Uses) > 0 {
+                        handleUses(w, c.Uses, grp, prefix, npath)
+                }
+
+        }
+}
+
diff -ruN goyang-dir-orig/pkg/yang/ast.go goyang-dir/pkg/yang/ast.go
--- goyang-dir-orig/pkg/yang/ast.go	2022-01-17 23:53:09.174875206 -0800
+++ goyang-dir/pkg/yang/ast.go	2022-01-18 14:03:49.606900799 -0800
@@ -391,6 +391,11 @@
 			descend(name, f.Type)
 
 			fn = func(s *Statement, v, p reflect.Value) error {
+				if s.Keyword == "yang-version" ||
+					s.Keyword == "import" {
+					// unset for optimization
+					return nil
+				}
 				if v.Type() != at {
 					panic(fmt.Sprintf("given type %s, need type %s", v.Type(), at))
 				}
diff -ruN goyang-dir-orig/pkg/yang/entry.go goyang-dir/pkg/yang/entry.go
--- goyang-dir-orig/pkg/yang/entry.go	2022-01-17 23:53:09.174875206 -0800
+++ goyang-dir/pkg/yang/entry.go	2022-01-18 15:32:08.428212781 -0800
@@ -29,6 +29,7 @@
 	"sort"
 	"strconv"
 	"strings"
+	"sync"
 
 	"github.com/openconfig/goyang/pkg/indent"
 )
@@ -79,8 +80,9 @@
 	Mandatory   TriState  `json:",omitempty"` // whether this entry is mandatory in the tree
 
 	// Fields associated with directory nodes
-	Dir map[string]*Entry `json:",omitempty"`
-	Key string            `json:",omitempty"` // Optional key name for lists (i.e., maps)
+	Dir      map[string]*Entry `json:",omitempty"`
+	DirOKeys []string          // Ordered Keys list in Dir
+	Key      string            `json:",omitempty"` // Optional key name for lists (i.e., maps)
 
 	// Fields associated with leaf nodes
 	Type *YangType    `json:",omitempty"`
@@ -115,6 +117,11 @@
 	// the augmenting entity per RFC6020 Section 7.15.2. The namespace
 	// of the Entry should be accessed using the Namespace function.
 	namespace *Value
+
+	ChildSchemaCache map[reflect.StructTag]*Entry `json:"-"`
+	ChildSchemaMutex sync.RWMutex                 `json:"-"`
+
+	IsSchemaValidated bool `json:"-"`
 }
 
 // An RPCEntry contains information related to an RPC Node.
@@ -262,11 +269,12 @@
 // newDirectory returns an empty directory Entry.
 func newDirectory(n Node) *Entry {
 	return &Entry{
-		Kind:  DirectoryEntry,
-		Dir:   make(map[string]*Entry),
-		Node:  n,
-		Name:  n.NName(),
-		Extra: map[string][]interface{}{},
+		Kind:     DirectoryEntry,
+		Dir:      make(map[string]*Entry),
+		DirOKeys: make([]string, 0),
+		Node:     n,
+		Name:     n.NName(),
+		Extra:    map[string][]interface{}{},
 	}
 }
 
@@ -360,6 +368,7 @@
 		return e
 	}
 	e.Dir[key] = value
+	e.DirOKeys = append(e.DirOKeys, key)
 	return e
 }
 
@@ -540,6 +549,7 @@
 		e.Config, err = tristateValue(s.Config)
 		e.addError(err)
 		e.Prefix = getRootPrefix(e)
+		e.Description = ""
 		return e
 	case *LeafList:
 		// Create the equivalent leaf element that we are a list of.
@@ -567,6 +577,7 @@
 			OrderedBy:   s.OrderedBy,
 		}
 		e.Prefix = getRootPrefix(e)
+		e.Description = ""
 		return e
 	case *Uses:
 		g := FindGrouping(s, s.Name, map[string]bool{})
@@ -932,6 +943,11 @@
 		e.Prefix = getRootPrefix(e)
 	}
 
+	// unset for optimization
+	e.Description = ""
+	e.Extra = nil
+	e.Augmented = nil
+
 	return e
 }
 
@@ -999,7 +1015,7 @@
 					}
 
 					if devSpec.Default != "" {
-						deviatedNode.Default = ""
+						deviatedNode.Default = devSpec.Default
 					}
 
 					if devSpec.Mandatory != TSUnset {
@@ -1082,6 +1098,7 @@
 				}
 				ce.Parent = ne
 				e.Dir[k] = ne
+				e.DirOKeys = append(e.DirOKeys, k)
 			}
 		}
 	}
@@ -1252,6 +1269,14 @@
 	// copied we will have to explicitly uncopy them.
 	ne := *e
 
+	//Copy the ordered Dir keys to new entry
+	if len(e.DirOKeys) > 0 {
+		ne.DirOKeys = make([]string, 0)
+		for _, key := range e.DirOKeys {
+			ne.DirOKeys = append(ne.DirOKeys, key)
+		}
+	}
+
 	// Now only copy direct children, clear their Dir, and fix up
 	// Parent pointers.
 	if e.Dir != nil {
@@ -1275,6 +1300,14 @@
 	// to do that.
 	ne := *e
 
+	//Copy the ordered Dir keys to new entry
+	if len(e.DirOKeys) > 0 {
+		ne.DirOKeys = make([]string, 0)
+		for _, key := range e.DirOKeys {
+			ne.DirOKeys = append(ne.DirOKeys, key)
+		}
+	}
+
 	// Now recurse down to all of our children, fixing up Parent
 	// pointers as we go.
 	if e.Dir != nil {
@@ -1310,6 +1343,7 @@
 			v.Parent = e
 			v.Exts = append(v.Exts, oe.Exts...)
 			e.Dir[k] = v
+			e.DirOKeys = append(e.DirOKeys, k)
 		}
 	}
 }
@@ -1371,8 +1405,8 @@
 		}
 		return nless(fi[x], fj[x])
 	}
-	for x := 1; x < 4; x++ {
-		switch compare(1) {
+	for x := 0; x < len(fi) && x < len(fj); x++ {
+		switch compare(x) {
 		case -1:
 			return true
 		case 1:
diff -ruN goyang-dir-orig/pkg/yang/types.go goyang-dir/pkg/yang/types.go
--- goyang-dir-orig/pkg/yang/types.go	2022-01-17 23:53:09.174875206 -0800
+++ goyang-dir/pkg/yang/types.go	2022-01-17 23:55:14.303340837 -0800
@@ -12,6 +12,9 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
+// This file is changed by Broadcom.
+// Modifications - Copyright 2019 Broadcom. The term Broadcom refers to Broadcom Inc. and/or its subsidiaries.
+
 package yang
 
 // This file implements the functions relating to types and typedefs.
@@ -69,6 +72,12 @@
 	}
 	if td := d.find(root, name); td != nil {
 		return td, nil
+	} else {
+		for _, in := range root.Include {
+			if td := typeDict.find(in.Module, name); td != nil {
+				return td, nil
+			}
+		}
 	}
 	if prefix != "" {
 		name = prefix + ":" + name
diff -ruN goyang-dir-orig/README.md goyang-dir/README.md
--- goyang-dir-orig/README.md	2022-01-17 23:53:09.174875206 -0800
+++ goyang-dir/README.md	2022-01-17 23:55:14.303340837 -0800
@@ -14,6 +14,7 @@
 
 *  tree - a simple tree representation
 *  types - list understood types extracted from the schema
+*  annotate - a template file to annotate the yang modules
 
 The yang package, and the goyang program, are not complete and are a work in
 progress.
diff -ruN goyang-dir-orig/yang.go goyang-dir/yang.go
--- goyang-dir-orig/yang.go	2022-01-17 23:53:09.174875206 -0800
+++ goyang-dir/yang.go	2022-01-17 23:55:14.303340837 -0800
@@ -58,6 +58,7 @@
 type formatter struct {
 	name  string
 	f     func(io.Writer, []*yang.Entry)
+	utilf func([]string, map[string]*yang.Module)
 	help  string
 	flags *getopt.Set
 }
@@ -208,5 +209,8 @@
 		entries[x] = yang.ToEntry(mods[n])
 	}
 
+	if format == "annotate" {
+	    formatters[format].utilf(files, mods)
+        }
 	formatters[format].f(os.Stdout, entries)
 }
